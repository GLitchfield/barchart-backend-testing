package com.barchart.backend.testing.db.tools;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.restlet.engine.util.Base64;

import com.amazonaws.services.simpledb.AmazonSimpleDBClient;
import com.amazonaws.services.simpledb.model.DeleteAttributesRequest;
import com.amazonaws.services.simpledb.model.PutAttributesRequest;
import com.amazonaws.services.simpledb.model.ReplaceableAttribute;
import com.amazonaws.services.simpledb.model.UpdateCondition;

public class InsertPrefs {
	
	//expocafe
	public static final String TARGET_ACC_ID = "a952de29-6b07-4c13-9d62-56a95bd4c675";
	public static final String OLD_ACT = "f9595d10-1556-41d8-88e8-8cdcbde0843a";
	
	public static final String KEY = "a952de29-6b07-4c13-9d62-56a95bd4c675,default,com.barchart.platform.barchart-plugin-core,com.barchart.plugin.core.impl.widget.news.News.9b96a20c_a658_4793_a307_b9af177253b9";
	public static final String TIME = "1377519957700";
	public static final String TEXT = "533a3NwYWNlLlNldHRpbmdUeXBlXCIsIFwiTElTVEJVVFRPTlwiIF0sXHJcbiAgICBcIlNldHRpbmdFeHRyYXNcIiA6IHtcclxuICAgICAgXCJlblwiIDogXCJFbmdsaXNoXCIsXHJcbiAgICAgIFwiZXNcIiA6IFwiU3BhbmlzaFwiXHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAgXCJAY2xhc3NcIiA6IFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcIixcclxuICAgIFwiV2lkZ2V0SURcIiA6IFwiTmV3c1wiLFxyXG4gICAgXCJDYXRlZ29yeVwiIDogXCJCYXNpY3NcIixcclxuICAgIFwiU2V0dGluZ0dyb3VwXCIgOiBcIkRpc3BsYXlcIixcclxuICAgIFwiU2V0dGluZ0lEXCIgOiBcImRpc3BsYXlfZm9udFwiLFxyXG4gICAgXCJTZXR0aW5nTmFtZVwiIDogXCJEaXNwbGF5IEZvbnRcIixcclxuICAgIFwiU2V0dGluZ1R5cGVcIiA6IFsgXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVwiLCBcIkZPTlRcIiBdXHJcbiAgfSwge1xyXG4gICAgXCJAY2xhc3NcIiA6IFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcIixcclxuICAgIFwiV2lkZ2V0SURcIiA6IFwiTmV3c1wiLFxyXG4gICAgXCJDYXRlZ29yeVwiIDogXCJCYXNpY3NcIixcclxuICAgIFwiU2V0dGluZ0dyb3VwXCIgOiBcIkJlaGF2aW9yXCIsXHJcbiAgICBcIlNldHRpbmdJRFwiIDogXCJkb3VibGVfY2xpY2tfYWN0aW9uXCIsXHJcbiAgICBcIlNl, 534dHRpbmdOYW1lXCIgOiBcIkRlZmF1bHQgUmVhZCBBY3Rpb25cIixcclxuICAgIFwiU2V0dGluZ1R5cGVcIiA6IFsgXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVwiLCBcIkxJU1RCVVRUT05cIiBdLFxyXG4gICAgXCJTZXR0aW5nRXh0cmFzXCIgOiB7XHJcbiAgICAgIFwicG9wX3VwXCIgOiBcIkRpYWxvZyBXaW5kb3dcIixcclxuICAgICAgXCJicm93c2VyXCIgOiBcIk9wZW4gaW4gQnJvd3NlclwiXHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAgXCJAY2xhc3NcIiA6IFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcIixcclxuICAgIFwiV2lkZ2V0SURcIiA6IFwiTmV3c1wiLFxyXG4gICAgXCJDYXRlZ29yeVwiIDogXCJCYXNpY3NcIixcclxuICAgIFwiU2V0dGluZ0dyb3VwXCIgOiBcIkJlaGF2aW9yXCIsXHJcbiAgICBcIlNldHRpbmdJRFwiIDogXCJrZWVwX3RvcFwiLFxyXG4gICAgXCJTZXR0aW5nTmFtZVwiIDogXCJLZWVwIG5ldyBzdG9yaWVzIHZpc2libGVcIixcclxuICAgIFwiU2V0dGluZ1R5cGVcIiA6IFsgXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVwiLCBcIkJPT0xFQU5cIiBdXHJcbiAgfSBdXHJcbn0iLA0KICAgICJBTExfTEFORyIgOiAie1xyXG4gIFwiZW5cIiA6IFwiRW5nbGlzaFwiLFxyXG4gIFwiZXNcIiA6IFwiU3BhbmlzaFwiXHJcbn0iLA0KICAgICJfc2hvd190aXRsZSIg, 532Y2FsXCIsXHJcbiAgICAgIFwiU1RLLkFVVFRUXCIgOiBcIkF1dG8tVGlyZXMtVHJ1Y2tzXCIsXHJcbiAgICAgIFwiU1RLLkNOVFJDXCIgOiBcIkNvbnN0cnVjdGlvblwiLFxyXG4gICAgICBcIlNUSy5DTlNTVFwiIDogXCJDb25zdW1lciBTdGFwbGVzXCIsXHJcbiAgICAgIFwiU1RLLkNNUFRFQ1wiIDogXCJDb21wdXRlcnMgJiBUZWNoLlwiLFxyXG4gICAgICBcIlNUSy5BUk9TUFwiIDogXCJBZXJvc3BhY2VcIixcclxuICAgICAgXCJGVVQuV1RIXCIgOiBcIldlYXRoZXJcIixcclxuICAgICAgXCJTVEsuREVGXCIgOiBcIkRlZmVuc2VcIixcclxuICAgICAgXCJTVEsuQ09SUFwiIDogXCJDb3Jwb3JhdGVcIixcclxuICAgICAgXCJTVEsuVEVDSFwiIDogXCJUZWNobm9sb2d5XCIsXHJcbiAgICAgIFwiU1RLXCIgOiBcIlN0b2Nrc1wiXHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAgXCJAY2xhc3NcIiA6IFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcIixcclxuICAgIFwiV2lkZ2V0SURcIiA6IFwiTmV3c1wiLFxyXG4gICAgXCJDYXRlZ29yeVwiIDogXCJTb3VyY2VzXCIsXHJcbiAgICBcIlNldHRpbmdHcm91cFwiIDogXCJMYW5ndWFnZVwiLFxyXG4gICAgXCJTZXR0aW5nSURcIiA6IFwibGFuZ1wiLFxyXG4gICAgXCJTZXR0aW5nTmFtZVwiIDogXCJTdG9yeSBMYW5ndWFnZVwiLFxyXG4gICAgXCJTZXR0aW5nVHlwZVwiIDogWyBcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29y, 529bCBTZXR6ZXIgR3JhaW4gQ29tbWVudGFyeVwiLFxyXG4gICAgICBcIktPVE1UXCIgOiBcIktlZW5lIE9uIFRoZSBNYXJrZXRcIixcclxuICAgICAgXCJLT1RNXCIgOiBcIktlZW5lIE9uIFRoZSBNYXJrZXRcIixcclxuICAgICAgXCJGRE1PXCIgOiBcIktldmluIFZhbiBUcnVtcFwiLFxyXG4gICAgICBcIkxFQ1wiIDogXCJMZXZlcmFnZWQgRVRGIENhcGl0YWxcIixcclxuICAgICAgXCJOQVdHXCIgOiBcIk5hdGlvbmFsIEFzc29jaWF0aW9uIG9mIFdoZWF0IEdyb3dlcnNcIixcclxuICAgICAgXCJOQ0dBXCIgOiBcIk5hdGlvbmFsIENvcm4gR3Jvd2VycyBBc3NuXCIsXHJcbiAgICAgIFwiTk1QXCIgOiBcIk5hdGlvbmFsIE1pbGsgUHJvZHVjZXJzXCIsXHJcbiAgICAgIFwiTldTXCIgOiBcIk5hdGlvbmFsIFdlYXRoZXIgU2VydmljZVwiLFxyXG4gICAgICBcIlBSTldcIiA6IFwiUFIgTmV3c3dpcmVcIixcclxuICAgICAgXCJDUEZcIiA6IFwiUHJlc3NlIENhbmFkaWVubmVcIixcclxuICAgICAgXCJTS0FMXCIgOiBcIlNlZWtpbmcgQWxwaGFcIixcclxuICAgICAgXCJTTU9QXCIgOiBcIlNpbXBsZXIgT3B0aW9uc1wiLFxyXG4gICAgICBcIlNNT1BUXCIgOiBcIlNpbXBsZXIgT3B0aW9uc1wiLFxyXG4gICAgICBcIlNQQ1wiIDogXCJTdGV3YXJ0LVBldGVyc29uIE1hcmtldCBDb21tZW50YXJ5XCIsXHJcbiAgICAgIFwiU1RQRVwiIDogXCJTdGV3YXJ0LVBldGVyc29uIE1hcmtldCBDb21tZW50YXJ5XCIsXHJcbiAgICAgIFwi, 535OiAiZmFsc2UiDQogIH0NCn0=, 531XCIgOiBcIkNvY29hXCIsXHJcbiAgICAgIFwiTi9TR1JcIiA6IFwiU3VnYXJcIixcclxuICAgICAgXCJOL0ZTVFwiIDogXCJMdW1iZXJcIixcclxuICAgICAgXCJOL0NUTlwiIDogXCJDb3R0b25cIixcclxuICAgICAgXCJOL0hHU1wiIDogXCJIb2dzXCIsXHJcbiAgICAgIFwiTi9DVExcIiA6IFwiQ2F0dGxlXCIsXHJcbiAgICAgIFwiTi9PU0RcIiA6IFwiT2lsc2VlZHNcIixcclxuICAgICAgXCJOL0dSTlwiIDogXCJHcmFpbnNcIixcclxuICAgICAgXCJTVEsuT0lMRU5HXCIgOiBcIk9pbHMtRW5lcmd5XCIsXHJcbiAgICAgIFwiU1RLLkJNVFJcIiA6IFwiQmFzaWMgTWF0ZXJpYWxzXCIsXHJcbiAgICAgIFwiU1RLLlVUTFwiIDogXCJVdGlsaXRpZXNcIixcclxuICAgICAgXCJTVEsuSU5EU1BcIiA6IFwiSW5kdXN0cmlhbCBQcm9kdWN0c1wiLFxyXG4gICAgICBcIlNUSy5GTlwiIDogXCJGaW5hbmNlXCIsXHJcbiAgICAgIFwiU1RLLkJJU1NSVlwiIDogXCJCdXNpbmVzcyBTZXJ2aWNlc1wiLFxyXG4gICAgICBcIlNUSy5DT05TRFNcIiA6IFwiQ29uc3VtZXIgRGlzY3JlYy5cIixcclxuICAgICAgXCJTVEsuU1JWXCIgOiBcIlNlcnZpY2VzXCIsXHJcbiAgICAgIFwiU1RLLklORFNcIiA6IFwiSW5kaWNlc1wiLFxyXG4gICAgICBcIlNUSy5UUk5TXCIgOiBcIlRyYW5zcG9ydGF0aW9uXCIsXHJcbiAgICAgIFwiU1RLLlJUTEhTXCIgOiBcIlJldGFpbC1XaG9sZXNhbGVcIixcclxuICAgICAgXCJTVEsuTURDTFwiIDogXCJNZWRp, 527IkFHRkFYXCIgOiBcIkFnRmF4XCIsXHJcbiAgICAgIFwiQUdXRUJcIiA6IFwiQWdXZWJcIixcclxuICAgICAgXCJBR0NPTVwiIDogXCJBZ3JpY3VsdHVyZS5jb21cIixcclxuICAgICAgXCJBU0FcIiA6IFwiQW1lcmljYW4gU295YmVhbiBBc3NvY2lhdGlvblwiLFxyXG4gICAgICBcIkFQXCIgOiBcIkFzc29jaWF0ZWQgUHJlc3NcIixcclxuICAgICAgXCJDT05UXCIgOiBcIkJhcmNoYXJ0IENvbnRyaWJ1dG9yc1wiLFxyXG4gICAgICBcIkJDXCIgOiBcIkJhcmNoYXJ0LmNvbVwiLFxyXG4gICAgICBcIkJBTlwiIDogXCJCcm93bmZpZWxkIEFnIE5ld3NcIixcclxuICAgICAgXCJCUlVHXCIgOiBcIkJydWdsZXIgTWFya2V0aW5nIGFuZCBNYW5hZ2VtZW50LCBMTENcIixcclxuICAgICAgXCJDTUVcIiA6IFwiQ01FIENvbW1lbnRhcnlcIixcclxuICAgICAgXCJDTldcIiA6IFwiQ2FuYWRhIE5ld3N3aXJlXCIsXHJcbiAgICAgIFwiQ1BcIiA6IFwiQ2FuYWRpYW4gUHJlc3NcIixcclxuICAgICAgXCJCRVNDXCIgOiBcIkNoYWQgQmVzY2ggRW5lcmd5IENvbW1lbnRhcnlcIixcclxuICAgICAgXCJDRk5cIiA6IFwiQ29tbW9kaXR5IE5ldHdvcmsgLSBDb2ZmZWUgV2lyZVwiLFxyXG4gICAgICBcIkNSQlwiIDogXCJDb21tb2RpdHkgUmVzZWFyY2ggQnVyZWF1XCIsXHJcbiAgICAgIFwiQ01UWFwiIDogXCJDb210ZXhcIixcclxuICAgICAgXCJETEZYXCIgOiBcIkRhaWx5RlhcIixcclxuICAgICAgXCJERUNGXCIgOiBcIkRlY2lzaXZl, 528IEZhcm1pbmdcIixcclxuICAgICAgXCJESlwiIDogXCJEb3cgSm9uZXNcIixcclxuICAgICAgXCJFVEZEQlwiIDogXCJFVEYgRGF0YWJhc2VcIixcclxuICAgICAgXCJFVEZHXCIgOiBcIkVURkd1aWRlLmNvbVwiLFxyXG4gICAgICBcIkFDVFwiIDogXCJFbWFpbCBGb3JtYXR0aW5nIFRlc3QgQS9jXCIsXHJcbiAgICAgIFwiRkNTVFwiIDogXCJGQ1N0b25lL0Rvd25lcy1PJ05laWxsIERhaXJ5IE1hcmtldCBDb21tZW50YXJ5XCIsXHJcbiAgICAgIFwiRkNET1wiIDogXCJGQ1N0b25lL0Rvd25lcy1PJ05laWxsIERhaXJ5IE1hcmtldCBDb21tZW50YXJ5XCIsXHJcbiAgICAgIFwiRlhQUk9cIiA6IFwiRk9SRVhQUk9TXCIsXHJcbiAgICAgIFwiRkFEXCIgOiBcIkZhcm0gYW5kIERhaXJ5XCIsXHJcbiAgICAgIFwiRkhGQVwiIDogXCJGZWRlcmFsIEhvdXNpbmcgRmluYW5jZSBBdXRob3JpdHlcIixcclxuICAgICAgXCJGUkJcIiA6IFwiRmVkZXJhbCBSZXNlcnZlIEJvYXJkXCIsXHJcbiAgICAgIFwiRk9PTFwiIDogXCJGb29sLmNvbVwiLFxyXG4gICAgICBcIkZPUkJcIiA6IFwiRm9yYmVzLmNvbVwiLFxyXG4gICAgICBcIkZNQUNcIiA6IFwiRnJlZGRpZSBNYWNcIixcclxuICAgICAgXCJHUk5FVFwiIDogXCJHUkFJTk5FVFwiLFxyXG4gICAgICBcIklGXCIgOiBcIkluc2lkZUZ1dHVyZXNcIixcclxuICAgICAgXCJJQkRcIiA6IFwiSW52ZXN0b3IncyBCdXNpbmVzcyBEYWlseVwiLFxyXG4gICAgICBcIlNFVFpcIiA6IFwiS2Fy, 530VFJDVFwiIDogXCJUcmFkaW5nIENlbnRyYWxcIixcclxuICAgICAgXCJUUlNEXCIgOiBcIlRyZWFzdXJ5IERpcmVjdFwiLFxyXG4gICAgICBcIlVTREFcIiA6IFwiVVNEQSBNYXJrZXQgTmV3c1wiLFxyXG4gICAgICBcIk5BU1NcIiA6IFwiVVNEQSBOQVNTIFJlcG9ydHNcIixcclxuICAgICAgXCJXVEhSXCIgOiBcIldlYXRoZXIuY29tXCIsXHJcbiAgICAgIFwiWkFDS1NcIiA6IFwiWmFja3MgSW52ZXN0bWVudCBSZXNlYXJjaFwiXHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAgXCJAY2xhc3NcIiA6IFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcIixcclxuICAgIFwiV2lkZ2V0SURcIiA6IFwiTmV3c1wiLFxyXG4gICAgXCJDYXRlZ29yeVwiIDogXCJTb3VyY2VzXCIsXHJcbiAgICBcIlNldHRpbmdHcm91cFwiIDogXCJDYXRlZ29yaWVzXCIsXHJcbiAgICBcIlNldHRpbmdJRFwiIDogXCJjYXRlZ29yaWVzXCIsXHJcbiAgICBcIlNldHRpbmdOYW1lXCIgOiBcIkF2YWlsYWJsZSBDYXRlZ29yaWVzXCIsXHJcbiAgICBcIlNldHRpbmdUeXBlXCIgOiBbIFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcIiwgXCJBVkFJTEFCTEVfU0VMRUNURURcIiBdLFxyXG4gICAgXCJTZXR0aW5nRXh0cmFzXCIgOiB7XHJcbiAgICAgIFwiTi9DRkVcIiA6IFwiQ29mZmVlXCIsXHJcbiAgICAgIFwiRy9BR0RcIiA6IFwiVVNEQVwiLFxyXG4gICAgICBcIk4vQ09D, 000, 524b3JcXFwiIDogXFxcIi03MDQwXFxcIixcXHJcXG4gIFxcXCJub3JtYWxfaGVhZGxpbmVfYmdfY29sb3JcXFwiIDogXFxcIi0xXFxcIixcXHJcXG4gIFxcXCJzaG93X3RpdGxlXFxcIiA6IFxcXCJ0cnVlXFxcIixcXHJcXG4gIFxcXCJzZXJ2aWNlLnBpZFxcXCIgOiBcXFwiY29tLmJhcmNoYXJ0LnBsdWdpbi5jb3JlLmltcGwud2lkZ2V0Lm5ld3MuTmV3c1xcXCIsXFxyXFxuICBcXFwic2VsZWN0ZWRfaGVhZGxpbmVfZmdfY29sb3JcXFwiIDogXFxcIi0xXFxcIixcXHJcXG4gIFxcXCJkaXNwbGF5X2ZvbnRcXFwiIDogXFxcIlZlcmRhbmEtUExBSU4tMTFcXFwiLFxcclxcbiAgXFxcInRpbWVzdGFtcF9mZ19jb2xvclxcXCIgOiBcXFwiLTQxNDQ5NjBcXFwiLFxcclxcbiAgXFxcInByb3ZpZGVyc1xcXCIgOiBcXFwie1xcXFxyXFxcXG4gIFxcXFxcXFwiQ0ZOXFxcXFxcXCIgOiBcXFxcXFxcIkNvZmZlZSBOZXR3b3JrXFxcXFxcXCJcXFxcclxcXFxufVxcXCIsXFxyXFxuICBcXFwic291bmRfb25faGVhZGxpbmVfc291bmRcXFwiIDogXFxcImJlZXBcXFwiLFxcclxcbiAgXFxcImRvdWJsZV9jbGlja19hY3Rpb25cXFwiIDogXFxcInBvcF91cFxcXCIsXFxyXFxuICBcXFwicmVjZW50X2hlYWRsaW5lX2ZnX2NvbG9yXFxcIiA6IFxcXCItMTY3NzcyMTZcXFwiLFxcclxcbiAgXFxcIm5vcm1hbF9oZWFkbGluZV9mZ19jb2xvclxcXCIgOiBcXFwiLTE1MDY2NTk4XFxcIixcXHJcXG4gIFxcXCJjYXRlZ29yaWVzXFxcIiA6IFxcXCJ7XFxc, 519OiBcXFxcXFxcIk5ld3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiQ2F0ZWdvcnlcXFxcXFxcIiA6IFxcXFxcXFwiQ29sb3JzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdHcm91cFxcXFxcXFwiIDogXFxcXFxcXCJQYXN0IEhlYWRsaW5lc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nSURcXFxcXFxcIiA6IFxcXFxcXFwibm9ybWFsX2hlYWRsaW5lX2JnX2NvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIlBhc3QgaGVhZGxpbmUgYmFja2dyb3VuZCBjb2xvclxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nVHlwZVxcXFxcXFwiIDogWyBcXFxcXFxcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLlNldHRpbmdUeXBlXFxcXFxcXCIsIFxcXFxcXFwiQ09MT1JcXFxcXFxcIiBdLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nVmFsdWVcXFxcXFxcIiA6IFxcXFxcXFwiLTFcXFxcXFxcIlxcXFxyXFxcXG4gIH0sIHtcXFxcclxcXFxuICAgIFxcXFxcXFwiQGNsYXNzXFxcXFxcXCIgOiBcXFxcXFxcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIldpZGdldElEXFxcXFxcXCIgOiBcXFxcXFxcIk5ld3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiQ2F0ZWdvcnlcXFxc, 526XCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5Db25maWdFbnRyeVwiLFxyXG4gICAgXCJXaWRnZXRJRFwiIDogXCJOZXdzXCIsXHJcbiAgICBcIkNhdGVnb3J5XCIgOiBcIkJhc2ljc1wiLFxyXG4gICAgXCJTZXR0aW5nR3JvdXBcIiA6IFwiRGlzcGxheVwiLFxyXG4gICAgXCJTZXR0aW5nSURcIiA6IFwic2hvd190aXRsZVwiLFxyXG4gICAgXCJTZXR0aW5nTmFtZVwiIDogXCJTaG93IFRpdGxlYmFyXCIsXHJcbiAgICBcIlNldHRpbmdUeXBlXCIgOiBbIFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcIiwgXCJCT09MRUFOXCIgXVxyXG4gIH0sIHtcclxuICAgIFwiQGNsYXNzXCIgOiBcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XCIsXHJcbiAgICBcIldpZGdldElEXCIgOiBcIk5ld3NcIixcclxuICAgIFwiQ2F0ZWdvcnlcIiA6IFwiU291cmNlc1wiLFxyXG4gICAgXCJTZXR0aW5nR3JvdXBcIiA6IFwiRmVlZHNcIixcclxuICAgIFwiU2V0dGluZ0lEXCIgOiBcInByb3ZpZGVyc1wiLFxyXG4gICAgXCJTZXR0aW5nTmFtZVwiIDogXCJBdmFpYWJsZSBGZWVkc1wiLFxyXG4gICAgXCJTZXR0aW5nVHlwZVwiIDogWyBcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLlNldHRpbmdUeXBlXCIsIFwiQVZBSUxBQkxFX1NFTEVDVEVEXCIgXSxcclxuICAgIFwiU2V0dGluZ0V4dHJhc1wiIDoge1xyXG4gICAgICBc, 518XFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJXaWRnZXRJRFxcXFxcXFwiIDogXFxcXFxcXCJOZXdzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIkNhdGVnb3J5XFxcXFxcXCIgOiBcXFxcXFxcIkNvbG9yc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nR3JvdXBcXFxcXFxcIiA6IFxcXFxcXFwiUmVjZW50IEhlYWRsaW5lc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nSURcXFxcXFxcIiA6IFxcXFxcXFwicmVjZW50X2hlYWRsaW5lX2ZnX2NvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIlJlY2VudCBoZWFkbGluZSBmb3JlZ3JvdW5kIGNvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdUeXBlXFxcXFxcXCIgOiBbIFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcXFxcXFxcIiwgXFxcXFxcXCJDT0xPUlxcXFxcXFwiIF0sXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdWYWx1ZVxcXFxcXFwiIDogXFxcXFxcXCItMTY3NzcyMTZcXFxcXFxcIlxcXFxyXFxcXG4gIH0sIHtcXFxcclxcXFxuICAgIFxcXFxcXFwiQGNsYXNzXFxcXFxcXCIgOiBcXFxcXFxcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIldpZGdldElEXFxcXFxcXCIg, 514XFxcXFwiIDogXFxcXFxcXCJOZXdzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIkNhdGVnb3J5XFxcXFxcXCIgOiBcXFxcXFxcIkJhc2ljc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nR3JvdXBcXFxcXFxcIiA6IFxcXFxcXFwiQmVoYXZpb3JcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0lEXFxcXFxcXCIgOiBcXFxcXFxcImtlZXBfdG9wXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIktlZXAgbmV3IHN0b3JpZXMgdmlzaWJsZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nVHlwZVxcXFxcXFwiIDogWyBcXFxcXFxcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLlNldHRpbmdUeXBlXFxcXFxcXCIsIFxcXFxcXFwiQk9PTEVBTlxcXFxcXFwiIF0sXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdWYWx1ZVxcXFxcXFwiIDogdHJ1ZVxcXFxyXFxcXG4gIH0sIHtcXFxcclxcXFxuICAgIFxcXFxcXFwiQGNsYXNzXFxcXFxcXCIgOiBcXFxcXFxcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIldpZGdldElEXFxcXFxcXCIgOiBcXFxcXFxcIk5ld3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiQ2F0ZWdvcnlcXFxcXFxcIiA6IFxcXFxcXFwiQmFzaWNzXFxcXFxcXCIsXFxc, 515XHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdHcm91cFxcXFxcXFwiIDogXFxcXFxcXCJTb3VuZHNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0lEXFxcXFxcXCIgOiBcXFxcXFxcInNvdW5kX29uX2hlYWRsaW5lXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIlBsYXkgc291bmQgb24gbmV3IGhlYWRsaW5lXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdUeXBlXFxcXFxcXCIgOiBbIFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcXFxcXFxcIiwgXFxcXFxcXCJCT09MRUFOXFxcXFxcXCIgXSxcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1ZhbHVlXFxcXFxcXCIgOiBmYWxzZVxcXFxyXFxcXG4gIH0sIHtcXFxcclxcXFxuICAgIFxcXFxcXFwiQGNsYXNzXFxcXFxcXCIgOiBcXFxcXFxcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIldpZGdldElEXFxcXFxcXCIgOiBcXFxcXFxcIk5ld3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiQ2F0ZWdvcnlcXFxcXFxcIiA6IFxcXFxcXFwiQmFzaWNzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdHcm91cFxcXFxcXFwiIDogXFxcXFxcXCJTb3VuZHNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwi, 513OiBcXFxcXFxcIkJlaGF2aW9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdJRFxcXFxcXFwiIDogXFxcXFxcXCJkb3VibGVfY2xpY2tfYWN0aW9uXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIkRlZmF1bHQgUmVhZCBBY3Rpb25cXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1R5cGVcXFxcXFxcIiA6IFsgXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVxcXFxcXFwiLCBcXFxcXFxcIkxJU1RCVVRUT05cXFxcXFxcIiBdLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nRXh0cmFzXFxcXFxcXCIgOiB7XFxcXHJcXFxcbiAgICAgIFxcXFxcXFwicG9wX3VwXFxcXFxcXCIgOiBcXFxcXFxcIkRpYWxvZyBXaW5kb3dcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJicm93c2VyXFxcXFxcXCIgOiBcXFxcXFxcIk9wZW4gaW4gQnJvd3NlclxcXFxcXFwiXFxcXHJcXFxcbiAgICB9LFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nVmFsdWVcXFxcXFxcIiA6IFxcXFxcXFwicG9wX3VwXFxcXFxcXCJcXFxcclxcXFxuICB9LCB7XFxcXHJcXFxcbiAgICBcXFxcXFxcIkBjbGFzc1xcXFxcXFwiIDogXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5Db25maWdFbnRyeVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJXaWRnZXRJRFxc, 522IEhlYWRsaW5lc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nSURcXFxcXFxcIiA6IFxcXFxcXFwic2VsZWN0ZWRfaGVhZGxpbmVfZmdfY29sb3JcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ05hbWVcXFxcXFxcIiA6IFxcXFxcXFwiU2VsZWN0ZWQgaGVhZGxpbmUgZm9yZWNvbG9yIGNvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdUeXBlXFxcXFxcXCIgOiBbIFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcXFxcXFxcIiwgXFxcXFxcXCJDT0xPUlxcXFxcXFwiIF0sXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdWYWx1ZVxcXFxcXFwiIDogXFxcXFxcXCItMVxcXFxcXFwiXFxcXHJcXFxcbiAgfSwge1xcXFxyXFxcXG4gICAgXFxcXFxcXCJAY2xhc3NcXFxcXFxcIiA6IFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiV2lkZ2V0SURcXFxcXFxcIiA6IFxcXFxcXFwiTmV3c1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJDYXRlZ29yeVxcXFxcXFwiIDogXFxcXFxcXCJDb2xvcnNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0dyb3VwXFxcXFxcXCIgOiBcXFxcXFxcIlRpbWVzdGFtcFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nSURcXFxcXFxc, 516U2V0dGluZ0lEXFxcXFxcXCIgOiBcXFxcXFxcInNvdW5kX29uX2hlYWRsaW5lX3NvdW5kXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdEZXBlbmRlbmN5SURcXFxcXFxcIiA6IFxcXFxcXFwic291bmRfb25faGVhZGxpbmUge2luZGVudH1cXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ05hbWVcXFxcXFxcIiA6IFxcXFxcXFwiU291bmRcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1R5cGVcXFxcXFxcIiA6IFsgXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVxcXFxcXFwiLCBcXFxcXFxcIkxJU1RCVVRUT05cXFxcXFxcIiBdLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nRXh0cmFzXFxcXFxcXCIgOiB7XFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiYmVlcFxcXFxcXFwiIDogXFxcXFxcXCJRdWljayBCZWVwXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiYWxlcnRcXFxcXFxcIiA6IFxcXFxcXFwiQ29vbCBBbGVydFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcImFsYXJtXFxcXFxcXCIgOiBcXFxcXFxcIkxvdWQgQWxhcm1cXFxcXFxcIlxcXFxyXFxcXG4gICAgfSxcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1ZhbHVlXFxcXFxcXCIgOiBcXFxcXFxcImJlZXBcXFxcXFxcIlxcXFxyXFxcXG4gIH0sIHtcXFxcclxcXFxuICAgIFxcXFxcXFwiQGNsYXNzXFxcXFxcXCIgOiBcXFxcXFxc, 501ZWNlbnRfaGVhZGxpbmVfZmdfY29sb3IiIDogIi0xNjc3NzIxNiIsDQogICAgIm5vcm1hbF9oZWFkbGluZV9mZ19jb2xvciIgOiAiLTE1MDY2NTk4IiwNCiAgICAiY2F0ZWdvcmllcyIgOiAie1xyXG59IiwNCiAgICAiaXNfbGlua2VkIiA6ICJmYWxzZSIsDQogICAgInNob3dfYm94IiA6ICJmYWxzZSIsDQogICAgIndpZGdldF9zcGFjZV9pZCIgOiAiNWQzNjM4ZTctM2I0Ni00MTExLWEyZWQtYzc1MGIyZmEzNzBjIiwNCiAgICAiX3RpdGxlIiA6ICJDb2ZmZWVOZXR3b3JrIEhlYWRsaW5lcyIsDQogICAgInZpZ2V0X3RlbXBsYXRlIiA6ICJ7XHJcbiAgXCJzaG93X2xpbmtlclwiIDogXCJmYWxzZVwiLFxyXG4gIFwic2VsZWN0ZWRfaGVhZGxpbmVfYmdfY29sb3JcIiA6IFwiLTExMzY3OTM3XCIsXHJcbiAgXCJrZWVwX3RvcFwiIDogXCJ0cnVlXCIsXHJcbiAgXCJ2aWRnZXRfaWRcIiA6IFwiOWI5NmEyMGMtYTY1OC00NzkzLWEzMDctYjlhZjE3NzI1M2I5XCIsXHJcbiAgXCJjb21wb25lbnQubmFtZVwiIDogXCJjb20uYmFyY2hhcnQucGx1Z2luLmNvcmUuaW1wbC53aWRnZXQubmV3cy5OZXdzXCIsXHJcbiAgXCJzb3VuZF9vbl9oZWFkbGluZVwiIDogXCJmYWxzZVwiLFxyXG4gIFwicmVjZW50X2hlYWRsaW5lX2JnX2NvbG9yXCIgOiBcIi03MDQwXCIsXHJcbiAgXCJub3JtYWxfaGVhZGxpbmVfYmdfY29sb3JcIiA6IFwiLTFcIixcclxuICBcInNob3dfdGl0bGVcIiA6IFwidHJ1ZVwiLFxyXG4gIFwic2VydmljZS5waWRcIiA6, 502IFwiY29tLmJhcmNoYXJ0LnBsdWdpbi5jb3JlLmltcGwud2lkZ2V0Lm5ld3MuTmV3c1wiLFxyXG4gIFwic2VsZWN0ZWRfaGVhZGxpbmVfZmdfY29sb3JcIiA6IFwiLTFcIixcclxuICBcImRpc3BsYXlfZm9udFwiIDogXCJWZXJkYW5hLVBMQUlOLTExXCIsXHJcbiAgXCJ0aW1lc3RhbXBfZmdfY29sb3JcIiA6IFwiLTQxNDQ5NjBcIixcclxuICBcInByb3ZpZGVyc1wiIDogXCJ7XFxyXFxuICBcXFwiQ0ZOXFxcIiA6IFxcXCJDb2ZmZWUgTmV0d29ya1xcXCJcXHJcXG59XCIsXHJcbiAgXCJzb3VuZF9vbl9oZWFkbGluZV9zb3VuZFwiIDogXCJiZWVwXCIsXHJcbiAgXCJkb3VibGVfY2xpY2tfYWN0aW9uXCIgOiBcInBvcF91cFwiLFxyXG4gIFwicmVjZW50X2hlYWRsaW5lX2ZnX2NvbG9yXCIgOiBcIi0xNjc3NzIxNlwiLFxyXG4gIFwibm9ybWFsX2hlYWRsaW5lX2ZnX2NvbG9yXCIgOiBcIi0xNTA2NjU5OFwiLFxyXG4gIFwiY2F0ZWdvcmllc1wiIDogXCJ7XFxyXFxufVwiLFxyXG4gIFwiaXNfbGlua2VkXCIgOiBcImZhbHNlXCIsXHJcbiAgXCJzaG93X2JveFwiIDogXCJmYWxzZVwiLFxyXG4gIFwid2lkZ2V0X3NwYWNlX2lkXCIgOiBcIjVkMzYzOGU3LTNiNDYtNDExMS1hMmVkLWM3NTBiMmZhMzcwY1wiLFxyXG4gIFwiX3RpdGxlXCIgOiBcIkNvZmZlZU5ldHdvcmsgSGVhZGxpbmVzXCIsXHJcbiAgXCJ2aWdldF90ZW1wbGF0ZVwiIDogXCJ7XFxyXFxuICBcXFwiY29uZmlnVGFibGVcXFwiIDogXFxcIntcXFxcclxcXFxuICBc, 504RFxcXFxcXFwiIF0sXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdFeHRyYXNcXFxcXFxcIiA6IHtcXFxcclxcXFxuICAgICAgXFxcXFxcXCJBR0ZBWFxcXFxcXFwiIDogXFxcXFxcXCJBZ0ZheFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIkFHV0VCXFxcXFxcXCIgOiBcXFxcXFxcIkFnV2ViIE5ld3NcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJBR0NPTVxcXFxcXFwiIDogXFxcXFxcXCJBZ3JpY3VsdHVyZS5jb21cXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJBU0FcXFxcXFxcIiA6IFxcXFxcXFwiQW1lcmljYW4gU295YmVhbiBBc3NuXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiQVBcXFxcXFxcIiA6IFxcXFxcXFwiQXNzb2NpYXRlZCBQcmVzc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIkNPTlRcXFxcXFxcIiA6IFxcXFxcXFwiQmFyY2hhcnQgQ29udHJpYnV0b3JzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiQkNcXFxcXFxcIiA6IFxcXFxcXFwiQmFyY2hhcnQuY29tXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiQkFOXFxcXFxcXCIgOiBcXFxcXFxcIkJyb3duZmllbGQgQWcgTmV3c1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIkJSVUdcXFxcXFxcIiA6IFxcXFxcXFwiQnJ1Z2xlciBDb21tZW50YXJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiQ01FXFxcXFxcXCIgOiBcXFxcXFxcIkNNRSBDb21t, 512Z29yeVxcXFxcXFwiIDogXFxcXFxcXCJCYXNpY3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0dyb3VwXFxcXFxcXCIgOiBcXFxcXFxcIkRpc3BsYXlcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0lEXFxcXFxcXCIgOiBcXFxcXFxcImRpc3BsYXlfZm9udFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nTmFtZVxcXFxcXFwiIDogXFxcXFxcXCJEaXNwbGF5IEZvbnRcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1R5cGVcXFxcXFxcIiA6IFsgXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVxcXFxcXFwiLCBcXFxcXFxcIkZPTlRcXFxcXFxcIiBdLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nVmFsdWVcXFxcXFxcIiA6IFxcXFxcXFwiVmVyZGFuYS1QTEFJTi0xMVxcXFxcXFwiXFxcXHJcXFxcbiAgfSwge1xcXFxyXFxcXG4gICAgXFxcXFxcXCJAY2xhc3NcXFxcXFxcIiA6IFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiV2lkZ2V0SURcXFxcXFxcIiA6IFxcXFxcXFwiTmV3c1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJDYXRlZ29yeVxcXFxcXFwiIDogXFxcXFxcXCJCYXNpY3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0dyb3VwXFxcXFxcXCIg, 523IiA6IFxcXFxcXFwidGltZXN0YW1wX2ZnX2NvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIkhlYWRsaW5lIHRpbWUgZm9yZWNvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdUeXBlXFxcXFxcXCIgOiBbIFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcXFxcXFxcIiwgXFxcXFxcXCJDT0xPUlxcXFxcXFwiIF0sXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdWYWx1ZVxcXFxcXFwiIDogXFxcXFxcXCItNDE0NDk2MFxcXFxcXFwiXFxcXHJcXFxcbiAgfSBdXFxcXHJcXFxcbn1cXFwiLFxcclxcbiAgXFxcInNob3dfbGlua2VyXFxcIiA6IFxcXCJmYWxzZVxcXCIsXFxyXFxuICBcXFwic2VsZWN0ZWRfaGVhZGxpbmVfYmdfY29sb3JcXFwiIDogXFxcIi0xMTM2NzkzN1xcXCIsXFxyXFxuICBcXFwia2VlcF90b3BcXFwiIDogXFxcInRydWVcXFwiLFxcclxcbiAgXFxcInZpZGdldF9pZFxcXCIgOiBcXFwiOWI5NmEyMGMtYTY1OC00NzkzLWEzMDctYjlhZjE3NzI1M2I5XFxcIixcXHJcXG4gIFxcXCJjb21wb25lbnQubmFtZVxcXCIgOiBcXFwiY29tLmJhcmNoYXJ0LnBsdWdpbi5jb3JlLmltcGwud2lkZ2V0Lm5ld3MuTmV3c1xcXCIsXFxyXFxuICBcXFwic291bmRfb25faGVhZGxpbmVcXFwiIDogXFxcImZhbHNlXFxcIixcXHJcXG4gIFxcXCJyZWNlbnRfaGVhZGxpbmVfYmdfY29s, 503XFxcXFxcIl90aXRsZVxcXFxcXFwiIDogXFxcXFxcXCJOZXdzXFxcXFxcXCIsXFxcXHJcXFxcbiAgXFxcXFxcXCJoZWlnaHRcXFxcXFxcIiA6IDQ4NSxcXFxcclxcXFxuICBcXFxcXFxcIndpZHRoXFxcXFxcXCIgOiA3NDAsXFxcXHJcXFxcbiAgXFxcXFxcXCJzZXR0aW5nRW50cmllc1xcXFxcXFwiIDogWyB7XFxcXHJcXFxcbiAgICBcXFxcXFxcIkBjbGFzc1xcXFxcXFwiIDogXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5Db25maWdFbnRyeVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJXaWRnZXRJRFxcXFxcXFwiIDogXFxcXFxcXCJOZXdzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIkNhdGVnb3J5XFxcXFxcXCIgOiBcXFxcXFxcIlNvdXJjZXNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0dyb3VwXFxcXFxcXCIgOiBcXFxcXFxcIkZlZWRzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdJRFxcXFxcXFwiIDogXFxcXFxcXCJwcm92aWRlcnNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ05hbWVcXFxcXFxcIiA6IFxcXFxcXFwiQXZhaWFibGUgRmVlZHNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1R5cGVcXFxcXFxcIiA6IFsgXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVxcXFxcXFwiLCBcXFxcXFxcIkFWQUlMQUJMRV9TRUxFQ1RF, 511b25maWdFbnRyeVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJXaWRnZXRJRFxcXFxcXFwiIDogXFxcXFxcXCJOZXdzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIkNhdGVnb3J5XFxcXFxcXCIgOiBcXFxcXFxcIkJhc2ljc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nR3JvdXBcXFxcXFxcIiA6IFxcXFxcXFwiRGlzcGxheVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nSURcXFxcXFxcIiA6IFxcXFxcXFwic2hvd190aXRsZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nTmFtZVxcXFxcXFwiIDogXFxcXFxcXCJTaG93IFRpdGxlYmFyXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdUeXBlXFxcXFxcXCIgOiBbIFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcXFxcXFxcIiwgXFxcXFxcXCJCT09MRUFOXFxcXFxcXCIgXSxcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1ZhbHVlXFxcXFxcXCIgOiB0cnVlXFxcXHJcXFxcbiAgfSwge1xcXFxyXFxcXG4gICAgXFxcXFxcXCJAY2xhc3NcXFxcXFxcIiA6IFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiV2lkZ2V0SURcXFxcXFxcIiA6IFxcXFxcXFwiTmV3c1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJDYXRl, 507XFxcXCJQcmVzc2UgQ2FuYWRpZW5uZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUUEVcXFxcXFxcIiA6IFxcXFxcXFwiU3Rld2FydC1QZXRlcnNvbiBNYXJrZXQgQ29tbWVudGFyeVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNQQ1xcXFxcXFwiIDogXFxcXFxcXCJTdGV3YXJ0LVBldGVyc29uIE1hcmtldCBDb21tZW50YXJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiTkFTU1xcXFxcXFwiIDogXFxcXFxcXCJVU0RBIE5BU1MgUmVwb3J0c1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlVTREFcXFxcXFxcIiA6IFxcXFxcXFwiVVNEQSBSZXBvcnRzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiV1RIUlxcXFxcXFwiIDogXFxcXFxcXCJXZWF0aGVyLmNvbVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlpBQ0tTXFxcXFxcXCIgOiBcXFxcXFxcIlphY2tzIEludmVzdG1lbnQgUmVzZWFyY2hcXFxcXFxcIlxcXFxyXFxcXG4gICAgfSxcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1ZhbHVlXFxcXFxcXCIgOiBbIFxcXFxcXFwiQ29mZmVlIE5ldHdvcmtcXFxcXFxcIiBdXFxcXHJcXFxcbiAgfSwge1xcXFxyXFxcXG4gICAgXFxcXFxcXCJAY2xhc3NcXFxcXFxcIiA6IFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiV2lkZ2V0SURcXFxcXFxc, 500ew0KICAic2V0dGluZ3MiIDogew0KICAgICJzaG93X2xpbmtlciIgOiAiZmFsc2UiLA0KICAgICJzZWxlY3RlZF9oZWFkbGluZV9iZ19jb2xvciIgOiAiLTExMzY3OTM3IiwNCiAgICAia2VlcF90b3AiIDogInRydWUiLA0KICAgICJ2aWRnZXRfaWQiIDogIjliOTZhMjBjLWE2NTgtNDc5My1hMzA3LWI5YWYxNzcyNTNiOSIsDQogICAgImNvbXBvbmVudC5uYW1lIiA6ICJjb20uYmFyY2hhcnQucGx1Z2luLmNvcmUuaW1wbC53aWRnZXQubmV3cy5OZXdzIiwNCiAgICAic291bmRfb25faGVhZGxpbmUiIDogImZhbHNlIiwNCiAgICAicmVjZW50X2hlYWRsaW5lX2JnX2NvbG9yIiA6ICItNzA0MCIsDQogICAgIm5vcm1hbF9oZWFkbGluZV9iZ19jb2xvciIgOiAiLTEiLA0KICAgICJzaG93X3RpdGxlIiA6ICJ0cnVlIiwNCiAgICAic2VydmljZS5waWQiIDogImNvbS5iYXJjaGFydC5wbHVnaW4uY29yZS5pbXBsLndpZGdldC5uZXdzLk5ld3MiLA0KICAgICJzZWxlY3RlZF9oZWFkbGluZV9mZ19jb2xvciIgOiAiLTEiLA0KICAgICJkaXNwbGF5X2ZvbnQiIDogIlZlcmRhbmEtUExBSU4tMTEiLA0KICAgICJ0aW1lc3RhbXBfZmdfY29sb3IiIDogIi00MTQ0OTYwIiwNCiAgICAicHJvdmlkZXJzIiA6ICJ7XHJcbiAgXCJDRk5cIiA6IFwiQ29mZmVlIE5ldHdvcmtcIlxyXG59IiwNCiAgICAic291bmRfb25faGVhZGxpbmVfc291bmQiIDogImJlZXAiLA0KICAgICJkb3VibGVfY2xpY2tfYWN0aW9uIiA6ICJwb3BfdXAiLA0KICAgICJy, 520XFxcIiA6IFxcXFxcXFwiQ29sb3JzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdHcm91cFxcXFxcXFwiIDogXFxcXFxcXCJQYXN0IEhlYWRsaW5lc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nSURcXFxcXFxcIiA6IFxcXFxcXFwibm9ybWFsX2hlYWRsaW5lX2ZnX2NvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIlBhc3QgaGVhZGxpbmUgZm9yZ3JvdW5kIGNvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdUeXBlXFxcXFxcXCIgOiBbIFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcXFxcXFxcIiwgXFxcXFxcXCJDT0xPUlxcXFxcXFwiIF0sXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdWYWx1ZVxcXFxcXFwiIDogXFxcXFxcXCItMTUwNjY1OThcXFxcXFxcIlxcXFxyXFxcXG4gIH0sIHtcXFxcclxcXFxuICAgIFxcXFxcXFwiQGNsYXNzXFxcXFxcXCIgOiBcXFxcXFxcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIldpZGdldElEXFxcXFxcXCIgOiBcXFxcXFxcIk5ld3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiQ2F0ZWdvcnlcXFxcXFxcIiA6IFxcXFxcXFwiQ29sb3JzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxc, 517ImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIldpZGdldElEXFxcXFxcXCIgOiBcXFxcXFxcIk5ld3NcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiQ2F0ZWdvcnlcXFxcXFxcIiA6IFxcXFxcXFwiQ29sb3JzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdHcm91cFxcXFxcXFwiIDogXFxcXFxcXCJSZWNlbnQgSGVhZGxpbmVzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdJRFxcXFxcXFwiIDogXFxcXFxcXCJyZWNlbnRfaGVhZGxpbmVfYmdfY29sb3JcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ05hbWVcXFxcXFxcIiA6IFxcXFxcXFwiUmVjZW50IGhlYWRsaW5lIGJhY2tncm91bmQgY29sb3JcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1R5cGVcXFxcXFxcIiA6IFsgXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVxcXFxcXFwiLCBcXFxcXFxcIkNPTE9SXFxcXFxcXCIgXSxcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1ZhbHVlXFxcXFxcXCIgOiBcXFxcXFxcIi03MDQwXFxcXFxcXCJcXFxcclxcXFxuICB9LCB7XFxcXHJcXFxcbiAgICBcXFxcXFxcIkBjbGFzc1xcXFxcXFwiIDogXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5Db25maWdFbnRyeVxc, 521IlNldHRpbmdHcm91cFxcXFxcXFwiIDogXFxcXFxcXCJTZWxlY3RlZCBIZWFkbGluZXNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0lEXFxcXFxcXCIgOiBcXFxcXFxcInNlbGVjdGVkX2hlYWRsaW5lX2JnX2NvbG9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIlNlbGVjdGVkIGhlYWRsaW5lIGJhY2tncm91bmQgY29sb3JcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1R5cGVcXFxcXFxcIiA6IFsgXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVxcXFxcXFwiLCBcXFxcXFxcIkNPTE9SXFxcXFxcXCIgXSxcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1ZhbHVlXFxcXFxcXCIgOiBcXFxcXFxcIi0xMTM2NzkzN1xcXFxcXFwiXFxcXHJcXFxcbiAgfSwge1xcXFxyXFxcXG4gICAgXFxcXFxcXCJAY2xhc3NcXFxcXFxcIiA6IFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuQ29uZmlnRW50cnlcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiV2lkZ2V0SURcXFxcXFxcIiA6IFxcXFxcXFwiTmV3c1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJDYXRlZ29yeVxcXFxcXFwiIDogXFxcXFxcXCJDb2xvcnNcXFxcXFxcIixcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ0dyb3VwXFxcXFxcXCIgOiBcXFxcXFxcIlNlbGVjdGVk, 509LklORFNQXFxcXFxcXCIgOiBcXFxcXFxcIkluZHVzdHJpYWwgUHJvZHVjdHNcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJTVEsuRk5cXFxcXFxcIiA6IFxcXFxcXFwiRmluYW5jZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5CSVNTUlZcXFxcXFxcIiA6IFxcXFxcXFwiQnVzaW5lc3MgU2VydmljZXNcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJTVEsuQ09OU0RTXFxcXFxcXCIgOiBcXFxcXFxcIkNvbnN1bWVyIERpc2NyZWMuXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiU1RLLlNSVlxcXFxcXFwiIDogXFxcXFxcXCJTZXJ2aWNlc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5JTkRTXFxcXFxcXCIgOiBcXFxcXFxcIkluZGljZXNcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJTVEsuVFJOU1xcXFxcXFwiIDogXFxcXFxcXCJUcmFuc3BvcnRhdGlvblxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5SVExIU1xcXFxcXFwiIDogXFxcXFxcXCJSZXRhaWwtV2hvbGVzYWxlXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiU1RLLk1EQ0xcXFxcXFxcIiA6IFxcXFxcXFwiTWVkaWNhbFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5BVVRUVFxcXFxcXFwiIDogXFxcXFxcXCJBdXRvLVRpcmVzLVRydWNrc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5DTlRSQ1xcXFxcXFwiIDog, 508IiA6IFxcXFxcXFwiTmV3c1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJDYXRlZ29yeVxcXFxcXFwiIDogXFxcXFxcXCJTb3VyY2VzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdHcm91cFxcXFxcXFwiIDogXFxcXFxcXCJDYXRlZ29yaWVzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdJRFxcXFxcXFwiIDogXFxcXFxcXCJjYXRlZ29yaWVzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdOYW1lXFxcXFxcXCIgOiBcXFxcXFxcIkF2YWlsYWJsZSBDYXRlZ29yaWVzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBcXFxcXFxcIlNldHRpbmdUeXBlXFxcXFxcXCIgOiBbIFxcXFxcXFwiY29tLmJhcmNoYXJ0LnBsYXRmb3JtLmFwaS53b3Jrc3BhY2UuU2V0dGluZ1R5cGVcXFxcXFxcIiwgXFxcXFxcXCJBVkFJTEFCTEVfU0VMRUNURURcXFxcXFxcIiBdLFxcXFxyXFxcXG4gICAgXFxcXFxcXCJTZXR0aW5nRXh0cmFzXFxcXFxcXCIgOiB7XFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiU1RLLk9JTEVOR1xcXFxcXFwiIDogXFxcXFxcXCJPaWxzLUVuZXJneVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5CTVRSXFxcXFxcXCIgOiBcXFxcXFxcIkJhc2ljIE1hdGVyaWFsc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5VVExcXFxcXFxcIiA6IFxcXFxcXFwiVXRpbGl0aWVzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiU1RL, 505ZW50YXJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiQ1BcXFxcXFxcIiA6IFxcXFxcXFwiQ2FuYWRpYW4gUHJlc3NcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJDRk5cXFxcXFxcIiA6IFxcXFxcXFwiQ29mZmVlIE5ldHdvcmtcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJDUkJcXFxcXFxcIiA6IFxcXFxcXFwiQ29tbW9kaXR5IFJlc2VhcmNoIEJ1cmVhdVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIkNNVFhcXFxcXFxcIiA6IFxcXFxcXFwiQ29tdGV4XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiREVDRlxcXFxcXFwiIDogXFxcXFxcXCJEZWNpc2l2ZSBGYXJtaW5nXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiREpcXFxcXFxcIiA6IFxcXFxcXFwiRG93IEpvbmVzXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiRVRGR1xcXFxcXFwiIDogXFxcXFxcXCJFVEZHdWlkZS5jb21cXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJGQ1NUXFxcXFxcXCIgOiBcXFxcXFxcIkZDU3RvbmUvRG93bmVzLU8nTmVpbGwgRGFpcnkgTWFya2V0IENvbW1lbnRhcnlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJGQ0RPXFxcXFxcXCIgOiBcXFxcXFxcIkZDU3RvbmUvRG93bmVzLU8nTmVpbGwgRGFpcnkgTWFya2V0IENvbW1lbnRhcnlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJGRE1PXFxcXFxcXCIgOiBcXFxcXFxcIkZh, 510XFxcXFxcXCJDb25zdHJ1Y3Rpb25cXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJTVEsuQ05TU1RcXFxcXFxcIiA6IFxcXFxcXFwiQ29uc3VtZXIgU3RhcGxlc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUSy5DTVBURUNcXFxcXFxcIiA6IFxcXFxcXFwiQ29tcHV0ZXJzICYgVGVjaC5cXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJTVEsuQVJPU1BcXFxcXFxcIiA6IFxcXFxcXFwiQWVyb3NwYWNlXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiRlVULldUSFxcXFxcXFwiIDogXFxcXFxcXCJXZWF0aGVyXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiU1RLLkRFRlxcXFxcXFwiIDogXFxcXFxcXCJEZWZlbnNlXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiU1RLLkNPUlBcXFxcXFxcIiA6IFxcXFxcXFwiQ29ycG9yYXRlXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiU1RLLlRFQ0hcXFxcXFxcIiA6IFxcXFxcXFwiVGVjaG5vbG9neVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIlNUS1xcXFxcXFwiIDogXFxcXFxcXCJTdG9ja3NcXFxcXFxcIlxcXFxyXFxcXG4gICAgfSxcXFxcclxcXFxuICAgIFxcXFxcXFwiU2V0dGluZ1ZhbHVlXFxcXFxcXCIgOiBbIF1cXFxcclxcXFxuICB9LCB7XFxcXHJcXFxcbiAgICBcXFxcXFxcIkBjbGFzc1xcXFxcXFwiIDogXFxcXFxcXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5D, 506cm0gRGlyZWN0aW9uXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiRkFEXFxcXFxcXCIgOiBcXFxcXFxcIkZhcm0gYW5kIERhaXJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiR1JORVRcXFxcXFxcIiA6IFxcXFxcXFwiR1JBSU5ORVRcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJJRlxcXFxcXFwiIDogXFxcXFxcXCJJbnNpZGVGdXR1cmVzIENvbW1lbnRhcnlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJTRVRaXFxcXFxcXCIgOiBcXFxcXFxcIkthcmwgU2V0emVyIEdyYWluIENvbW1lbnRhcnlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJOQVdHXFxcXFxcXCIgOiBcXFxcXFxcIk5hdGlvbmFsIEFzc24gb2YgV2hlYXQgR3Jvd2Vyc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIk5DR0FcXFxcXFxcIiA6IFxcXFxcXFwiTmF0aW9uYWwgQ29ybiBHcm93ZXJzIEFzc25cXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJOTVBcXFxcXFxcIiA6IFxcXFxcXFwiTmF0aW9uYWwgTWlsayBQcm9kdWNlcnNcXFxcXFxcIixcXFxcclxcXFxuICAgICAgXFxcXFxcXCJOV1NcXFxcXFxcIiA6IFxcXFxcXFwiTmF0aW9uYWwgV2VhdGhlciBTZXJ2aWNlXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgIFxcXFxcXFwiUFJOV1xcXFxcXFwiIDogXFxcXFxcXCJQUiBOZXdzd2lyZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICBcXFxcXFxcIkNQRlxcXFxcXFwiIDogXFxc, 525XHJcXFxcbn1cXFwiLFxcclxcbiAgXFxcImlzX2xpbmtlZFxcXCIgOiBcXFwiZmFsc2VcXFwiLFxcclxcbiAgXFxcInNob3dfYm94XFxcIiA6IFxcXCJmYWxzZVxcXCIsXFxyXFxuICBcXFwid2lkZ2V0X3NwYWNlX2lkXFxcIiA6IFxcXCI1ZDM2MzhlNy0zYjQ2LTQxMTEtYTJlZC1jNzUwYjJmYTM3MGNcXFwiLFxcclxcbiAgXFxcIl90aXRsZVxcXCIgOiBcXFwiQ29mZmVlTmV0d29yayBIZWFkbGluZXNcXFwiXFxyXFxufVwiXHJcbn0iLA0KICAgICJjb25maWdUYWJsZSIgOiAie1xyXG4gIFwiX3RpdGxlXCIgOiBcIk5ld3NcIixcclxuICBcImhlaWdodFwiIDogNTQwLFxyXG4gIFwid2lkdGhcIiA6IDc0MCxcclxuICBcInNldHRpbmdFbnRyaWVzXCIgOiBbIHtcclxuICAgIFwiQGNsYXNzXCIgOiBcImNvbS5iYXJjaGFydC5wbGF0Zm9ybS5hcGkud29ya3NwYWNlLkNvbmZpZ0VudHJ5XCIsXHJcbiAgICBcIldpZGdldElEXCIgOiBcIk5ld3NcIixcclxuICAgIFwiQ2F0ZWdvcnlcIiA6IFwiU291cmNlc1wiLFxyXG4gICAgXCJTZXR0aW5nR3JvdXBcIiA6IFwiU2VhcmNoXCIsXHJcbiAgICBcIlNldHRpbmdJRFwiIDogXCJrZXl3b3JkXCIsXHJcbiAgICBcIlNldHRpbmdOYW1lXCIgOiBcIktleXdvcmRcIixcclxuICAgIFwiU2V0dGluZ1R5cGVcIiA6IFsgXCJjb20uYmFyY2hhcnQucGxhdGZvcm0uYXBpLndvcmtzcGFjZS5TZXR0aW5nVHlwZVwiLCBcIlNUUklOR1wiIF1cclxuICB9LCB7XHJcbiAgICBcIkBjbGFzc1wiIDog";
	
	public static void main(final String[] args) throws Exception {
		
		final AmazonSimpleDBClient AWSclient = SimpleDBClientFactory.make("AKIAJYUTSX5C4HB5GZMA",
				 "oCa9h7Qgwv7jTPL1d7g3BM0S/P0e5fr1bR41e3lg");
		
		final int shardNo = getShardIndex(TARGET_ACC_ID, 16);
		final String volumeStr = "platform_preferences_1." + shardNo;
		
		final File file = new File("/home/gavin/Desktop/expocafe_Prefs_0");
		
		final InputStream inStream = new FileInputStream(file);
		final Reader inStreamR = new InputStreamReader(inStream);
		final BufferedReader reader = new BufferedReader(inStreamR);
		
		String key = reader.readLine();
		
		while(key!=null || key.equals("")) {
			
			try {
			
				key = key.replace("\t", "").replace(OLD_ACT, TARGET_ACC_ID);
			
				String val = reader.readLine().replace("\t", "");
				
				String timeTxt = val.split(":")[1].split(" ")[0];
				
				String text = val.split(":")[2].substring(1);
				text = text.substring(0, text.length()-1);
				
				System.out.println(key);
				System.out.println(timeTxt);
				
//				final List<String> prefs  = new ArrayList<String>();
//				
//				for(String s : text.split(",")) {
//					
//					s = s.trim();
//					prefs.add(s);
//					
//				}
//				
//				System.out.println(amazonDecode(prefs));
//				
//				final List<ReplaceableAttribute> attributes = new LinkedList<ReplaceableAttribute>();
//				
//				final ReplaceableAttribute time = new ReplaceableAttribute();
//				time.setName("time");
//				time.setValue(timeTxt);
//				time.setReplace(true);
//				
//				attributes.add(time);
//				
//				for(final String s : text.split(",")) {
//				
//					final ReplaceableAttribute txt = new ReplaceableAttribute();
//					txt.setName("text");
//					txt.setValue(s.trim());
//					txt.setReplace(true);
//					attributes.add(txt);
//					
//				}
//				
//				final UpdateCondition condition = null;
				
				//PutAttributesRequest request = new PutAttributesRequest(volumeStr, key, attributes, condition);
				
				DeleteAttributesRequest del = new DeleteAttributesRequest(volumeStr, key);
				
				//AWSclient.putAttributes(request);
				
				AWSclient.deleteAttributes(del);
		
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			key = reader.readLine();
		
		}
		
//		DeleteAttributesRequest del = new DeleteAttributesRequest(volumeStr, KEY);
//		
//		AWSclient.deleteAttributes(del);
		
	}
	
	// FROM RESTLET SIMPLE DB UTIL
	
	private static final long HASH_MINIM = Integer.MIN_VALUE;
	private static final long HASH_RANGE = Integer.MAX_VALUE - HASH_MINIM;
	
	public static int getShardIndex(String itemName, int shardCount) {
		return getShardIndexJOATT(itemName, shardCount);
	}
	
	public static int getShardIndexJOATT(String itemName, int shardCount) {

		if (shardCount <= 1) {
			return 0;
		}

		long shardRange = HASH_RANGE / shardCount;
		long hash = hashCodeJOATT_Char(itemName);
		long absoluteHash = hash - HASH_MINIM;

		return (int) (absoluteHash / shardRange);
	}
	
	public static int hashCodeJOATT_Char(String text) {

		int hash = 0;

		char[] array = text.toCharArray();

		for (char c : array) {
			hash += c;
			hash += (hash << 10);
			hash ^= (hash >>> 6);
		}

		hash += (hash << 3);
		hash ^= (hash >>> 11);
		hash += (hash << 15);

		return hash;

	}
	
	static final int AWS_SIZE_PREFIX = 3;
	static final String UTF_8 = "UTF-8";
	static final Charset CS_UTF_8 = Charset.forName(UTF_8);
	
	static String amazonDecode(final List<String> list) {

		Collections.sort(list);

		list.remove(0); // AWS_HEAD

		int size = 0;

		for (final String item : list) {
			size += item.length();
		}

		final StringBuilder text = new StringBuilder(size);

		for (final String item : list) {
			System.out.println(item);
			text.append(item.substring(AWS_SIZE_PREFIX));
		}

		byte[] array = Base64.decode(text.toString());

		return new String(array, CS_UTF_8);

	}
	
//	static final String UTF_8 = "UTF-8";
//	static final String AWS_HEAD = "000";
//	static final int AWS_BASE_PREFIX = 500;
//	static final int AWS_SIZE_PREFIX = 3;
//	static final int AWS_SIZE_ATTRIB = 1000;
//	
//	public static List<String> amazonEncode(final String value) {
//
//		final String result = Base64.encode(value.toCharArray(), UTF_8, false);
//
//		final int sizeChar = result.length();
//
//		final int count = sizeChar / AWS_SIZE_ATTRIB;
//
//		final List<String> list = new ArrayList<String>(count);
//
//		list.add(AWS_HEAD);
//
//		int step = 0;
//		for (int index = 0; index < sizeChar; index += AWS_SIZE_ATTRIB) {
//
//			final int start = index;
//			final int finish = Math.min(sizeChar, index + AWS_SIZE_ATTRIB);
//
//			final String entry = (AWS_BASE_PREFIX + step)
//					+ result.substring(start, finish);
//
//			list.add(entry);
//
//			step++;
//
//		}
//
//		return list;
//
//	}

	
}
